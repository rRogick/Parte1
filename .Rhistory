license()
license()
sessionInfo()
sessionInfo()
# Imprimir na tela
print('R - Uma das principais ferramentas do Cientista de Dados')
# Imprimir na tela
print('R - Uma das principais ferramentas do Cientista de Dados')
print('R - Uma das principais ferramentas do Cientista de Dados')
print('R - Uma das principais ferramentas do Cientista de Dados')
# Imprimir na tela
print('R - Uma das principais ferramentas do Cientista de Dados')
# Criar gráficos
plot(1:30)
hist(rnorm(10))
# Instalar pacotes
install.packages('randomForest')
hist(rnorm(10))
hist(rnorm(10))
hist(rnorm(10))
hist(rnorm(10))
install.packages('randomForest')
install.packages("ggplot2")
library(ggplot2)
detach(package:ggplot2)
help(mean)
?mean
help.search('randomForest')
help.search('matplot')
??matplot
RSiteSearch('matplot')
example('matplot')
4 + 4
4 - 4
4 * 4
# Divisao
4 / 4
# Potencia
4^2
4**2
# Modulo
14 %% 3
# Atibuindo variaveis
a = 7
b = 5
# Operadores
A > 8
# Operadores
a > 8
a < 8
a <= 8
a >= 8
a == 8
a != 8
(a==8) & (b==6)
(a==7) & (b==5)
(a==8) | (b>5)
(a==8) & (b==5)
(a==8) | (b>=5)
# Not
a > 8
print (!a > 8)
# Numeric - Todos os numeros criados em R sao do tipo numerico
num = 2.5
num
num2 = 4
num2
x = -123
x
class(x)
# Conversao de tipos Numeric
is.integer(num2)
y = as.integer(num2)
class(y)
x2 = 3.14
x2
y2 = as.intefer(3.14)
y2 = as.integer(3.14)
y2
as.integer('4.27')
as.integer("Joe")
as.integer('Joe')
as.integer(TRUE)
# Character
char1 = 'A'
char1
char2 = "bolha"
char2
# Complex
compl = 2.5 * 4i
compl
class(compl)
# Complex
compl = 2.5 + 4i
compl
class(compl)
compl
sqrt(-1)
sqrt(-1+0i)
sqrt(as.complex(-1))
# Logic
x = 1; y = 2
z = x > y
z
class(z)
u = TRUE; v = FALSE
class(u)
u & v
u | v
!u
# Operacoes com 0
5/0
0/5
# Erro
'Joe'/5
var1 = 367
va1
var1
mode(var1)
help("mode")
sqrt(var1)
var2 = as.integer(var1)
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("seg","ter","qua")
var3
mode(var3)
var4 = function(x) {x+3}
var4
# Podemos tambem mudar o modo do dado
var5 = as.character(var1)
var5
mode(var5)
## Atribuindo valores a objetos
x <- c(4,5,6)
x
c(4,5,6) -> y
y
assign(x,c(1,3,4,-2))
assign("x",c(1,3,4,-2))
## Verificando o valor em uma posicao especifica
x[1]
assign("x",c(1.3,4,-2))
## Verificando o valor em uma posicao especifica
x[1]
## Verificar objetos
ls()
## Verificar objetos
ls()
objects()
## Remover objetos
rm(x)
x
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:10, nrow =2)
matriz1
View(matriz1)
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim=c(3,3,3))
array1
lenght(array1)
mode(array1)
length(array1)
mode(array1)
class(array1)
typeof(array1)
# Data Frames: dados de diferentes tipos
view(iris)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista1 <- list(a=matriz1, b=vetor1)
lista1 <- list(a=matriz1, b=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x) {
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
# Removendo objetos
objetcts()
# Removendo objetos
objects()
rm(array1, func1)
objects()
# Vetor de caracteres
vetor_caracter = c("Ola","DSA")
vetor_caracter
# Vetor de floats
vetor_numerico = c(1.90, 45.3, 300.5)
vetor(numerico)
vetor_numerico
# Vetor de valores complexos
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
#Vetor de valores logicos
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
# Vetor de numeros inteiros
vetor_integer = c(2, 4, 6)
vetor_integer
# Utilizando seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
# Utilizando rep()
vetor2 = rep(1:5)
vetor2
# Indexacao de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
b <- c("Data","Science")
b
b[1]
# Combinando vetores
v1 = c(2 ,3 ,5)
v2 = c("aa","bb","cc","dd","ee")
c(v1,v2)
# Operacoes com Vetores
x = c(1,3,,5,7)
# Operacoes com Vetores
x = c(1,3,5,7)
y = c(2,4,6,8)
x * 5
x + y
x - y
x * y
x / y
# Somando vetores com numero diferentes de elementos
alfa = c(10,20,30)
beta = c(1,2,3,4,5,6,7,8,9)
alfa+beta
beta = c(1,2,3,4,5,6,7,8,9,10)
alfa+beta
beta = c(1,2,3,4,5,6,7,8)
alfa+beta
beta = c(1,2,3,4,5,6,7,8,9)
alfa+beta
# Vetor Nomeado
v = c("Barack", "Obama")
v
nomes(v) = c("Nome","Sobrenome")
names(v) = c("Nome","Sobrenome")
v["Nome"]
names(v) = c("Nome","Sobrenome")
v
v["Nome"]
# Numero de Linhas
matrix (c(1,2,3,4,5,6, nr = 2))
matrix (c(1,2,3,4,5,6, nr = 3))
matrix (c(1,2,3,4,5,6, nr = 3))
matrix (c(1,2,3,4,5,6, nr = 6))
# Numero de Linhas
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
# Numero de Colunas
matrix ( c ( 1,2,3,4,5,6), nc = 2)
# Help
?matrix
# Matrizes precisam tere um numero par de valores
matrix (c(1,2,3,4,5, nr = 2))
# Criando matrizes a partir de vetores e preenchendo a partir da
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
# Fatiando a Matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
# Criando uma matriz diagonal
matriz = 1:3
diag (matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag (matriz)
diag (vetor)
# Transposta da matriz
W <- matrix ( c (2,4,8,12 ), nr = 2, ncol = 2)
W
t(W)
U <- t(W)
U
# Obtendo uma matriz inversa
solve(W)
# Multiplicacao de Matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicando Matriz com Vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
# Nomeando a Matriz
mat3 <- matrix(c('Futebol','Natacao','Campo','Piscina', nr = 2))
mat3
# Nomeando a Matriz
mat3 <- matrix(c('Futebol','Natacao','Campo','Piscina'), nr = 2)
mat3
dimnames(mat3) = (list(c("Linha1","Linhas2"), c("Coluna1", "Coluna2")))
mat3
# Identificando linhas e colunas no momento de criacao da Matriz
matrix (c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linhas1","Linhas2", c("Coluna1","Colunas2"))))
# Identificando linhas e colunas no momento de criacao da Matriz
matrix (c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linhas1","Linhas2", c("Coluna1","Colunas2")))
# Identificando linhas e colunas no momento de criacao da Matriz
matrix (c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linhas1","Linhas2"), c("Coluna1","Colunas2")))
# Identificando linhas e colunas no momento de criacao da Matriz
matrix (c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linha 1","Linha 2"), c("Coluna 1","Coluna 2") ))
# Combinando Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4,mat5)
rbind(mat4,mat5)
# Disconstruindo a Matriz
c(mat4)
# Lista de strings
lista_caracter = list('A', 'Bem-vindo', 'DSA')
lista_caracter
# Lista de numeros inteiros
lista_inteiros = list(2,3,4)
lista_inteiros
# Lista de floats
lista_numerico = list(1.90,45.3,300.5)
lista_numerico
# Lista de numeros complexos
lista_complexos = list(5.2+3i,2.4+8i)
lista_complexos
# Lista de valores logicos
lista_logicos
# Lista de valores logicos
lista_logicos = list(TRUE,FALSE,TRUE)
lista_logicos
# Listas Compostas
lista_composta1 = list("A",3,TRUE)
lista_compasta1
lista_composta1
lista1 <- list(1:10, c("Maria","Joao","Alfredo"), rnorm(10))
lista1
?rnorm
# Slicing da lista
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[2][1]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
# Para nomear os elementos - Listas Nomeadas
names(lista1) <- c("inteiros","caracteres","numericos")
lista1
vec_num <- 1:4
vec_char <- c("A","B","C","D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
# Nomear os elementos diretamente
lista2 <- list(elemento1=3:5, elemento2=c(7.2,3.5))
lista2
# Trabalhando com elementos especificos da lista
names(lista1) <- c("inteiros","caracteres","numericos")
lista1
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
# Verificar o comprimentos da lista
length(lista1)
# Podemos extrair um elemento especifico dentro de cada nivel da lista
lista1$caracteres[2]
# Mode dos elementos
mode(lista1$numericos)
mode(lista1$caracteres)
# Combinando 2 listas
lista3 <- c(lista1, lista2)
lista3
# Transformando um vetor em lista
v = c(1:3)
v
# Transformando um vetor em lista
v = c(1:3)
v
l = as.list(v)
l
# Transformando um vetor em lista
v = c(1:3)
v # vetor
l = as.list(v)
l # lista
# Unindo 2 elementos em uma lista
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
veclst = list(mat,vec)
lst
lst = list(mat,vec)
lst
# Unindo 2 elementos em uma lista
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
lst = list(mat,vec)
lst
# String
texto <- "Isso e uma string"
texto
x = as.character(3.14)
x
class(x)
# Concatenando Strings
nome = "Barack"; sobrenome = "Obama"
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saida
sprintf("%s governa os EUA há %d anos", "Barack Obama", 8)
# Extraindo parte da string
texto <- "Isso e uma string"
substr(texto, start=12, stop=17)
?substr
# Contando o numero de caracteres
nchar(texto)
# Alterando a capitalizacao
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
# Usando stringr
library(stringr)
# Dividindo uma string em caracteres
strsplit("Histogramas e Elementos de Dados", NULL)
?strsplit
# Dividindo uma string em caracteres, apos o caracter espaco
strsplit("Histogramas e Elementos de Dados", " ")
# Trabalhando com strings
string1 <- c("Esta e a primeira parte da minha string e sera a primeira parte do meu vetor",
"Aqui a minha string continua, mas sera transformada no segundo vetor")
string2 <- c("Precisamos testar outras strings - @???!$",
"Analise de dados em R")
# Trabalhando com strings
string1 <- c("Esta e a primeira parte da minha string e sera a primeira parte do meu vetor",
"Aqui a minha string continua, mas sera transformada no segundo vetor")
string1
string2 <- c("Precisamos testar outras strings - @???!$",
"Analise de dados em R")
string2
# Adicionando 2 strings
str_c(c(string1, string2), sep ="")
# Adicionando 2 strings
str_c(c(string1, string2), sep ="")
# Podemos contar quantas vezes um caracter aparece no texto
str_count(string2, "s")
# Localiza a primeira e ultima posicao em que o caracter aparece
str_locate_all(string2, "s")
# Substitui a primeria ocorrencia de um caracter
str_replace(string2, "\\s", "")
# Substitui todas as ocorrencias de um caracter
str_replace_all(string2, "\\s", "")
# Detectando padroes nas strings
string1 <- "23 mai 2000"
string2 <- "1 mai 2000"
padrao <-"mai 20"
grepl(pattern = padrao, x = string1)
padrao <- "mai20"
grepl(pattern = padrao, x = string1)
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(arquivo)
arquivo <- read.csv("https://www.gutenberg.org/files/100/100-0.txt")
arquivo <- read.csv("http://www.gutenberg.org/files/100/100-0.txt")
head(arquivo)
arquivo <- read.csv("https://www.gutenberg.org/cache/epub/100/pg100.txt")
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(arquivo)
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(arquivo)
tail(arquivo)
str_locate_all(arquivo, "7")
# Criando funcoes para manipular strings
strtail <- function(s,n=1){
if(n<0)
substring(s,1-n)
else
substring(s,nchar(s)-n+1)}
strtail("String de teste", 6)
?read.csv
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt", TRUE)
